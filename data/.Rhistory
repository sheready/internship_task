getpwd()
getwd()
setwd("/home/stella/documents/internship/internship_task/")
setwd('~/Documents/internship/internship_task/data')
getwd()
install.packages("readr")
install.packages('textshaping')
install.packages('ragg')
install.packages('tidyverse')
library(readr)
library(tidyverse)
#import and display the data
getwd()
data <- read.csv('data/cema_internship_task_2023.csv', header=TRUE, sep=",")
data
#return columns with missing data
na_columns <- colnames(data)[apply(data, 2, anyNA)]
na_columns
#create mean value ignoring the missing values
mean_acute <- mean(data$Acute.Malnutrition, na.rm=TRUE)
mean_acute
#create mean value ignoring the missing values
mean_acute <- mean(data$Acute.Malnutrition, na.rm=TRUE)
mean_acute
#create new column with mean values using mutate
data_replace_acute <- data %>% mutate(replace_acute = ifelse(is.na(Acute.Malnutrition), mean_acute, Acute.Malnutrition))
data_replace_acute
install.packages('lme4')
install.packages('pbkrtest')
install.packages('car')
install.packages("rstatix")
install.packages("ggpubr", repos = "https://cloud.r-project.org/", dependencies = TRUE)
install.packages("nloptr")
#The Spearman correlation method computes the correlation between the rank of x and the rank of y variable
library("ggpubr")
ggscatter(data_replace_acute, x = "replace-acute", y = "Total Dewormed",
add = "reg.line", conf.int = TRUE,
cor.coef = TRUE, cor.method = "spearman",
xlab = "Acute Malnutrition", ylab = "Total dewormed")
#The Spearman correlation method computes the correlation between the rank of x and the rank of y variable
#Correlation between children dewormed and acute malnutrition
correlation <- cor(data$Total.Dewormed, data$Acute.Malnutrition, use = "complete.obs")
cat("Correlation between Total Dewormed and Acute Malnutrition:", correlation, "\n")
# Plot the scatter plot
ggplot(data, aes(x = Total.Dewormed, y = Acute.Malnutrition)) +
geom_point() +
labs(title = "Scatter Plot: Total Dewormed vs. Acute Malnutrition",
x = "Total Dewormed",
y = "Acute Malnutrition") +
theme_minimal()
cema_internship_task_2023 <- read.csv("~/Documents/internship/internship_task/data/cema_internship_task_2023.csv", header=FALSE)
View(cema_internship_task_2023)
#The Spearman correlation method computes the correlation between the rank of x and the rank of y variable
#Correlation between children dewormed and acute malnutrition
data_replace_acute <- data %>% mutate(replace_acute = ifelse(is.na(Acute.Malnutrition), mean_acute, Acute.Malnutrition))
#correlation <- cor(data_replace_acute$Total.Dewormed, data_replace_acute$Acute.Malnutrition, use = "complete.obs")
#cat("Correlation between Total Dewormed and Acute Malnutrition:", correlation, "\n")
#The Spearman correlation method computes the correlation between the rank of x and the rank of y variable
#Correlation between children dewormed and acute malnutrition
data_replace_acute <- data %>% mutate(replace_acute = ifelse(is.na(Acute.Malnutrition), mean_acute, Acute.Malnutrition))
data_replace_acute
#correlation <- cor(data_replace_acute$Total.Dewormed, data_replace_acute$Acute.Malnutrition, use = "complete.obs")
#cat("Correlation between Total Dewormed and Acute Malnutrition:", correlation, "\n")
View(data_replace_acute)
correlation <- cor(data_replace_acute$Total.Dewormed, data_replace_acute$replace_acute, use = "complete.obs")
cat("Correlation between Total Dewormed and Acute Malnutrition:", correlation, "\n")
# Plot the scatter plot
ggplot(data_replace_acute, aes(x = Total.Dewormed, y = replace_acute)) +
geom_point() +
labs(title = "Scatter Plot: Total Dewormed vs. Acute Malnutrition",
x = "Total Dewormed",
y = "Acute Malnutrition") +
theme_minimal()
# Plot the scatter plot
ggplot(data_replace_acute, aes(x = replace_acute, y = Total.Dewormed)) +
geom_point() +
labs(title = "Scatter Plot: Total Dewormed vs. Acute Malnutrition",
x = "Total Dewormed",
y = "Acute Malnutrition") +
theme_minimal()
data_diarrhoea <- data %>% select(period, county, diarrhoea.cases)
data_diarrhoea
# Plot seasonal pattern of diarrheal cases
ggplot(data_diarrhoea, aes(x = period, y = diarrhea.cases, group = county, color = county)) +
geom_line() +
labs(title = "Seasonal Pattern of Diarrhoea Cases among Children Under 5",
x = "Period", y = "Diarrhoea Cases") +
theme_minimal() +
theme(legend.position = "bottom")
# Plot seasonal pattern of diarrheal cases
ggplot(data_diarrhoea, aes(x = period, y = diarrhoea.cases, group = county, color = county)) +
geom_line() +
labs(title = "Seasonal Pattern of Diarrhoea Cases among Children Under 5",
x = "Period", y = "Diarrhoea Cases") +
theme_minimal() +
theme(legend.position = "bottom")
# Plot box plot to show seasonal pattern of diarrhoea cases
ggplot(data_diarrhoea, aes(x = period, y = diarrhoea.cases, fill = county)) +
geom_boxplot() +
labs(title = "Seasonal Pattern of Diarrhoea Cases among Children Under 5",
x = "Period", y = "Diarrhoea Cases") +
theme_minimal() +
theme(legend.position = "bottom")
# Plot box plot to show seasonal pattern of diarrhoea cases
ggplot(data_diarrhoea, aes(x = period, y = diarrhoea.cases, fill = county)) +
geom_line() +
labs(title = "Seasonal Pattern of Diarrhoea Cases among Children Under 5",
x = "Period", y = "Diarrhoea Cases") +
theme_minimal() +
theme(legend.position = "bottom")
# Plot seasonal pattern of diarrhoea cases
ggplot(data_diarrhoea, aes(x = period, y = diarrhoea.cases, group = county, color = county)) +
geom_tile() +
labs(title = "Seasonal Pattern of Diarrhoea Cases among Children Under 5",
x = "Period", fill = "Diarrhoea Cases", y="County") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_viridis_c() +
theme(legend.position = "bottom")
# Plot seasonal pattern of diarrhoea cases
ggplot(data_diarrhoea, aes(x = period, y = diarrhoea.cases, group = county, color = county)) +
geom_tile() +
labs(title = "Seasonal Pattern of Diarrhoea Cases among Children Under 5",
x = "Period", fill = "Diarrhoea Cases", y="County") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_viridis_c()
library(plotly)
install.packages('plotly)
library(plotly)
# Convert 'Period' column to Date format
install.packages('plotly')
library(plotly)
# Convert 'Period' column to Date format
data_diarrhoea$period <- as.Date(paste0(data_diarrhoea$Period, "-01"))
install.packages('plotly')
library(plotly)
# Create the interactive heatmap using plot_ly
heatmap <- plot_ly(data_diarrhoea, x = ~period, y = ~county, z = ~diarrhoea.cases,
type = "heatmap", colors = "Viridis",
colorscale = "Viridis", showscale = TRUE) %>%
layout(title = "Interactive Heatmap: Diarrhoea Cases among Children Under 5",
xaxis = list(title = "Period"),
yaxis = list(title = "County"))
# Display the interactive heatmap
heatmap
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages('plotly')
library(plotly)
library(viridis)
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
install.packages("plotly")
